digraph "include/Autograd.hpp"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname=Helvetica,fontsize=10,labelfontname=Helvetica,labelfontsize=10];
  node [fontname=Helvetica,fontsize=10,shape=box,height=0.2,width=0.4];
  Node1 [id="Node000001",label="include/Autograd.hpp",height=0.2,width=0.4,color="gray40", fillcolor="grey60", style="filled", fontcolor="black",tooltip="Defines the Autograd class for automatic differentiation and gradient computation."];
  Node1 -> Node2 [id="edge1_Node000001_Node000002",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node2 [id="Node000002",label="include/Trainer.hpp",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$_trainer_8hpp_source.html",tooltip=" "];
  Node1 -> Node3 [id="edge2_Node000001_Node000003",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node3 [id="Node000003",label="include/Value.hpp",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$_value_8hpp.html",tooltip="Defines a smallest unit that makes up a neural net."];
  Node3 -> Node4 [id="edge3_Node000003_Node000004",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node4 [id="Node000004",label="include/AbstractLoss.hpp",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$_abstract_loss_8hpp.html",tooltip="Defines an abstract base class for loss functions in neural networks."];
  Node4 -> Node5 [id="edge4_Node000004_Node000005",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node5 [id="Node000005",label="include/LossFunctions.hpp",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$_loss_functions_8hpp_source.html",tooltip=" "];
  Node3 -> Node6 [id="edge5_Node000003_Node000006",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node6 [id="Node000006",label="include/Activation.hpp",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$_activation_8hpp.html",tooltip="Defines activation functions and their types for neural networks."];
  Node6 -> Node7 [id="edge6_Node000006_Node000007",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node7 [id="Node000007",label="include/Neuron.hpp",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$_neuron_8hpp.html",tooltip="Defines the Neuron class, which represents a single neuron in a neural network, including its weights..."];
  Node7 -> Node8 [id="edge7_Node000007_Node000008",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node8 [id="Node000008",label="include/Layer.hpp",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$_layer_8hpp_source.html",tooltip=" "];
  Node8 -> Node9 [id="edge8_Node000008_Node000009",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node9 [id="Node000009",label="include/Algorithms.hpp",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$_algorithms_8hpp.html",tooltip="Defines common algorithms like Multi-Layer Perceptron (MLP)."];
  Node7 -> Node10 [id="edge9_Node000007_Node000010",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node10 [id="Node000010",label="include/core/CoreLinear.hpp",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$_core_linear_8hpp.html",tooltip="Defines the CoreLinear class for linear transformation in neural networks."];
  Node10 -> Node11 [id="edge10_Node000010_Node000011",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node11 [id="Node000011",label="include/core/Sequential.hpp",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$_sequential_8hpp.html",tooltip="Defines the Sequential class for sequentially stacking neural network layers."];
  Node11 -> Node12 [id="edge11_Node000011_Node000012",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node12 [id="Node000012",label="include/base/BaseMultiLayer\lPerceptron.hpp",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$_base_multi_layer_perceptron_8hpp.html",tooltip="Defines a base class for implementing Multi-Layer Perceptron (MLP) networks."];
  Node10 -> Node13 [id="edge12_Node000010_Node000013",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node13 [id="Node000013",label="include/nn/NeuralNet.hpp",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$_neural_net_8hpp_source.html",tooltip=" "];
  Node6 -> Node14 [id="edge13_Node000006_Node000014",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node14 [id="Node000014",label="include/core/CoreReLU.hpp",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$_core_re_l_u_8hpp.html",tooltip="Defines the CoreReLU class for applying ReLU activation in neural networks."];
  Node14 -> Node11 [id="edge14_Node000014_Node000011",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node14 -> Node13 [id="edge15_Node000014_Node000013",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node3 -> Node7 [id="edge16_Node000003_Node000007",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node3 -> Node15 [id="edge17_Node000003_Node000015",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node15 [id="Node000015",label="include/Tensor.hpp",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$_tensor_8hpp.html",tooltip="Defines Tensor1D and 2D classes that are the main data structures for performing mathematical operati..."];
  Node15 -> Node5 [id="edge18_Node000015_Node000005",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node15 -> Node7 [id="edge19_Node000015_Node000007",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node3 -> Node10 [id="edge20_Node000003_Node000010",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node3 -> Node16 [id="edge21_Node000003_Node000016",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node16 [id="Node000016",label="include/core/MppCore.hpp",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$_mpp_core_8hpp.html",tooltip="Defines the abstract base class MppCore for core neural network layers."];
  Node16 -> Node10 [id="edge22_Node000016_Node000010",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node16 -> Node14 [id="edge23_Node000016_Node000014",dir="back",color="steelblue1",style="solid",tooltip=" "];
}
