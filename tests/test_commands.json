[{
  "name" : "test1",
  "command" : ["a = Value(1.0)", "b = Value(2.0)", "c = a - b", "d = c.relu()", "d.backward()"],
  "results": ["a","b","c", "d"]
},
  {
    "name" : "test2",
    "command" : ["a = Value(4.0)", "b = a.tanh()", "c = b + a", "d = Value(16.56)", "e = d - c","e.backward()"],
    "results": ["a","b","c","d","e"]
  },
  {
    "name" : "test3",
    "command" : ["a = Value(4.0)", "b = a.tanh()", "c = b + a", "d = Value(16.56)", "e = d - c","f = e * 67 + 78", "f.backward()"],
    "results": ["a","b","c","d","e","f"]
  },
  {
    "name" : "test_add_value",
    "command" : ["a = Value(64)", "b = Value(8)", "c = a + b","c.backward()"],
    "results": ["a","b", "c"]
  },
  {
    "name" : "test_add_constant",
    "command" : ["a = Value(64)", "b = a + 8.90", "b.backward()"],
    "results": ["a","b"]
  },
  {
    "name" : "test_subtract_value",
    "command" : ["a = Value(64)", "b = Value(8)", "c = a - b","c.backward()"],
    "results": ["a","b", "c"]
  },
  {
    "name" : "test_subtract_constant",
    "command" : ["a = Value(64)", "b = a - 8.90", "b.backward()"],
    "results": ["a","b"]
  },
  {
    "name" : "test_multiply_value",
    "command" : ["a = Value(64)", "b = Value(8)", "c = a * b","c.backward()"],
    "results": ["a","b", "c"]
  },
  {
    "name" : "test_multiply_constant",
    "command" : ["a = Value(64)", "b = a * 8.90", "b.backward()"],
    "results": ["a","b"]
  },
  {
    "name" : "test_divide_constant",
    "command" : ["a = Value(64)", "b = a/8", "b.backward()"],
    "results": ["a","b"]
  },
  {
    "name" : "test_divide_value",
    "command" : ["a = Value(64)", "b =Value(8)", "c = a/b", "c.backward()"],
    "results": ["a","b", "c"]
  },
  {
    "name" : "test_tanh",
    "command" : ["a = Value(7.89)", "b = a.tanh()", "b.backward()"],
    "results": ["a","b"]
  },
  {
    "name" : "test_relu",
    "command" : ["a = Value(7.89)", "b = a.relu()", "b.backward()"],
    "results": ["a","b"]
  },
  {
    "name" : "test_value_relu_long",
    "command" : ["a = Value(0.4)", "b = Value(0.03)", "c=a*b","d=c.relu()","d.backward()"],
    "results": ["a","b","c","d"]
  },
  {
    "name" : "test_plus_equals",
    "command" : ["a = Value(64)", "b = Value(4.89)","b += a", "b.backward()"],
    "results": ["a","b"]
  },
  {
    "name" : "test_multiply_equals",
    "command" : ["a = Value(64)", "b = Value(4.89)","b *= a", "b.backward()"],
    "results": ["a","b"]
  },

  {
    "name" : "test_neuron_equal_weights",
    "command" : ["a = Neuron(3)", "a.set_weights_and_bias(12)","x = [-1,2,3]", "c={}","for idx in range(10):\n  y1 = a(x)\n  y1.backward()\n  d = a.parameters();\n  c[idx] = [[param.data, param.grad] for param in a.parameters()]\n  c[idx] = [[item for sublist in c[idx] for item in sublist]]\n"],
    "results": ["c"]
  },
  {
    "name" : "test_neuron_equal_weights_num_neurons_6",
    "command" : ["a = Neuron(6)", "a.set_weights_and_bias(-9)","x = [-1,2,3,7.89,3.78,6.78]", "c={}","for idx in range(10):\n  y1 = a(x)\n  y1.backward()\n  d = a.parameters();\n  c[idx] = [[param.data, param.grad] for param in a.parameters()]\n  c[idx] = [[item for sublist in c[idx] for item in sublist]]\n"],
    "results": ["c"]
  }
]