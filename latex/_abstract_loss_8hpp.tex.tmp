\doxysection{include/\+Abstract\+Loss.hpp File Reference}
\hypertarget{_abstract_loss_8hpp}{}\label{_abstract_loss_8hpp}\index{include/AbstractLoss.hpp@{include/AbstractLoss.hpp}}


Defines an abstract base class for loss functions in neural networks.  


{\ttfamily \#include "{}Value.\+hpp"{}}\newline
Include dependency graph for Abstract\+Loss.\+hpp\+:
% FIG 0
This graph shows which files directly or indirectly include this file\+:
% FIG 1
\doxysubsubsection*{Classes}
\begin{DoxyCompactItemize}
\item 
class \mbox{\hyperlink{classmicrogradpp_1_1_abstract_loss}{microgradpp\+::\+Abstract\+Loss$<$ T $>$}}
\begin{DoxyCompactList}\small\item\em Abstract base class for loss functions. \end{DoxyCompactList}\end{DoxyCompactItemize}


\doxysubsection{Detailed Description}
Defines an abstract base class for loss functions in neural networks. 

This file is part of the microgradpp project, a lightweight C++ library for neural network training and inference.\hypertarget{_value_8hpp_License}{}\doxysubsection{\texorpdfstring{License}{License}}\label{_value_8hpp_License}
This program is free software\+: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with this program. If not, see \href{https://www.gnu.org/licenses/}{\texttt{ https\+://www.\+gnu.\+org/licenses/}}.\hypertarget{_value_8hpp_Author}{}\doxysubsection{\texorpdfstring{Author}{Author}}\label{_value_8hpp_Author}
Gautam Sharma Email\+: \href{mailto:gautamsharma2813@gmail.com}{\texttt{ gautamsharma2813@gmail.\+com}} Created on\+: Sept 1, 2024

This header file contains the definition of the Abstract\+Loss template class. This class serves as a base for creating various loss functions in neural networks. Any class derived from Abstract\+Loss must implement the {\ttfamily operator()} method, which takes two parameters of type T (representing ground truth and predictions) and returns a Value\+Ptr representing the calculated loss. 